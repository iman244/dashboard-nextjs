name: Deploy djoser-nextjs App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_KEY }}
        script: |
          # Set up environment variables
          export NEXT_PUBLIC_DJANGO_ADDRESS="${{ secrets.NEXT_PUBLIC_DJANGO_ADDRESS }}"
          export NEXT_PUBLIC_DJANGO_API_PATH="${{ secrets.NEXT_PUBLIC_DJANGO_API_PATH }}"
          export NEXT_PUBLIC_5_160_115_210_ADDRESS="${{ secrets.NEXT_PUBLIC_5_160_115_210_ADDRESS }}"
          export NEXT_PUBLIC_5_160_115_210_API_PATH="${{ secrets.NEXT_PUBLIC_5_160_115_210_API_PATH }}"
          export NEXT_PUBLIC_AUTHORIZATION_TOKEN_NAME="${{ secrets.NEXT_PUBLIC_AUTHORIZATION_TOKEN_NAME }}"
          export NEXT_PUBLIC_ACCESS_TOKEN_KEY="${{ secrets.NEXT_PUBLIC_ACCESS_TOKEN_KEY }}"
          export NEXT_PUBLIC_REFRESH_TOKEN_KEY="${{ secrets.NEXT_PUBLIC_REFRESH_TOKEN_KEY }}"
          export NEXT_PUBLIC_LOCALE_COOKIE_NAME="${{ secrets.NEXT_PUBLIC_LOCALE_COOKIE_NAME }}"
          export NODE_ENV=production
          
          # Create app directory
          APP_DIR="/opt/medical-dashboard-nextjs"
          mkdir -p $APP_DIR
          cd $APP_DIR
          
          # Stop existing containers
          echo "üõë Stopping existing containers..."
          docker compose down || true
          
          # Clone or update repository
          if [ -d ".git" ]; then
            echo "üì• Pulling latest changes..."
            git pull origin main
          else
            echo "üì• Cloning repository..."
            git clone https://github.com/iman244/dashboard-nextjs.git .
          fi
          
          # Build and start containers with environment variables
          echo "üî® Building and starting containers..."
          docker compose build --build-arg NEXT_PUBLIC_DJANGO_ADDRESS="${{ secrets.NEXT_PUBLIC_DJANGO_ADDRESS }}" \
          --build-arg NEXT_PUBLIC_DJANGO_API_PATH="${{ secrets.NEXT_PUBLIC_DJANGO_API_PATH }}" \
          --build-arg NEXT_PUBLIC_5_160_115_210_ADDRESS="${{ secrets.NEXT_PUBLIC_5_160_115_210_ADDRESS }}" \
          --build-arg NEXT_PUBLIC_5_160_115_210_API_PATH="${{ secrets.NEXT_PUBLIC_5_160_115_210_API_PATH }}" \
          --build-arg NEXT_PUBLIC_AUTHORIZATION_TOKEN_NAME="${{ secrets.NEXT_PUBLIC_AUTHORIZATION_TOKEN_NAME }}" \
          --build-arg NEXT_PUBLIC_ACCESS_TOKEN_KEY="${{ secrets.NEXT_PUBLIC_ACCESS_TOKEN_KEY }}" \
          --build-arg NEXT_PUBLIC_REFRESH_TOKEN_KEY="${{ secrets.NEXT_PUBLIC_REFRESH_TOKEN_KEY }}" \
          --build-arg NEXT_PUBLIC_LOCALE_COOKIE_NAME="${{ secrets.NEXT_PUBLIC_LOCALE_COOKIE_NAME }}"
          
          docker compose up -d --quiet-pull
          
          # Wait for application to be ready
          echo "‚è≥ Waiting for application to be ready..."
          sleep 30
          
          # Check if application container is running
          echo "üîç Checking application container status..."
          if docker compose ps | grep -q "Up"; then
            echo "‚úÖ Application container is running successfully!"
          else
            echo "‚ùå Application container is not running"
            echo "üìã Container logs:"
            docker compose logs --tail=20
            exit 1
          fi
          
          # Show running containers
          echo "üìä Checking container status..."
          docker compose ps
          
          # Show recent logs
          echo "üìã Recent application logs:"
          docker compose logs --tail=10
          
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê Your app should be available at: http://$(hostname -I | awk '{print $1}'):3000"
